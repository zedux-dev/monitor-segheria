{"version":3,"file":"cell.js","names":["$text","getAttributesString","generateCellNumber","convertDateToExcelSerial","generateCell","rowNumber","columnIndex","value","type","cellStyleId","getSharedString","cellAttributes","r","s","Date","Error","getXlsxValue","getXlsxType","t","getOpeningAndClosingTags","openingTags","closingTags","String","Number","Boolean","name","TAG_BRACKET_LEFT_REGEXP","xlsxType","getOpeningTags","replace"],"sources":["../../source/write/cell.js"],"sourcesContent":["// import Integer, { isInteger } from '../types/Integer.js'\r\n// import URL, { isURL } from '../types/URL.js'\r\n// import Email, { isEmail } from '../types/Email.js'\r\n\r\nimport $text from '../xml/sanitizeText.js'\r\nimport getAttributesString from '../xml/getAttributesString.js'\r\n\r\nimport generateCellNumber from './generateCellNumber.js'\r\nimport convertDateToExcelSerial from './convertDateToExcelSerial.js'\r\n\r\nexport default function generateCell(\r\n  rowNumber,\r\n  columnIndex,\r\n  value,\r\n  type,\r\n  cellStyleId,\r\n  getSharedString\r\n) {\r\n  // Empty cells could be skipped completely,\r\n  // if they don't have a style applied to them,\r\n  // like border or background color.\r\n  if (value === null) {\r\n    if (!cellStyleId) {\r\n      return ''\r\n    }\r\n  }\r\n\r\n  const cellAttributes = {\r\n    r: generateCellNumber(columnIndex, rowNumber)\r\n  }\r\n\r\n  // Available formatting style IDs (built-in in Excel):\r\n  // https://xlsxwriter.readthedocs.io/format.html#format-set-num-format\r\n  // `2` — 0.00\r\n  // `3` —  #,##0\r\n  if (cellStyleId) {\r\n    // From the attribute s=\"12\" we know that the cell's formatting is stored at the 13th (zero-based index) <xf> within the <cellXfs>\r\n    cellAttributes.s = cellStyleId\r\n  }\r\n\r\n  if (value === null) {\r\n    return `<c${getAttributesString(cellAttributes)}/>`\r\n  }\r\n\r\n  // Validate date format.\r\n  if (type === Date && !cellStyleId) {\r\n    throw new Error('No \"format\" has been specified for a Date cell')\r\n  }\r\n\r\n  value = getXlsxValue(type, value, getSharedString)\r\n  type = getXlsxType(type)\r\n\r\n  // The default value for `t` is `\"n\"` (a number or a date).\r\n  if (type) {\r\n    cellAttributes.t = type\r\n  }\r\n\r\n  const [openingTags, closingTags] = getOpeningAndClosingTags(type)\r\n\r\n  return `<c${getAttributesString(cellAttributes)}>` +\r\n    openingTags +\r\n    value +\r\n    closingTags +\r\n    '</c>'\r\n}\r\n\r\nfunction getXlsxType(type) {\r\n  // Available Excel cell types:\r\n  // https://github.com/SheetJS/sheetjs/blob/19620da30be2a7d7b9801938a0b9b1fd3c4c4b00/docbits/52_datatype.md\r\n  //\r\n  // Some other document (seems to be old):\r\n  // http://webapp.docx4java.org/OnlineDemo/ecma376/SpreadsheetML/ST_CellType.html\r\n  //\r\n  switch (type) {\r\n    case String:\r\n    // case Email:\r\n    // case URL:\r\n      return 's'\r\n      // // \"inlineStr\" type is used instead of \"s\" to avoid creating a \"shared strings\" index.\r\n      // return 'inlineStr'\r\n\r\n    case Number:\r\n    // case Integer:\r\n      // `n` is the default cell type (if no `t` has been specified).\r\n      // return 'n'\r\n      return\r\n\r\n    case Date:\r\n      // `n` is the default cell type (if no `t` has been specified).\r\n      // return 'n'\r\n      return\r\n\r\n    case Boolean:\r\n      return 'b'\r\n\r\n    case 'Formula':\r\n      return 'f'\r\n\r\n    default:\r\n      throw new Error(`Unknown schema type: ${type && type.name || type}`)\r\n  }\r\n}\r\n\r\nfunction getXlsxValue(type, value, getSharedString) {\r\n  // Available Excel cell types:\r\n  // https://github.com/SheetJS/sheetjs/blob/19620da30be2a7d7b9801938a0b9b1fd3c4c4b00/docbits/52_datatype.md\r\n  //\r\n  // Some other document (seems to be old):\r\n  // http://webapp.docx4java.org/OnlineDemo/ecma376/SpreadsheetML/ST_CellType.html\r\n  //\r\n  switch (type) {\r\n    case String:\r\n    // case Email:\r\n    // case URL:\r\n      if (typeof value !== 'string') {\r\n        throw new Error(`Invalid cell value: ${value}. Expected a string`)\r\n      }\r\n      // if (type === Email && !isEmail(value)) {\r\n      //   throw new Error(`Invalid cell value: ${value}. Expected an Email`)\r\n      // }\r\n      // if (type === URL && !isURL(value)) {\r\n      //   throw new Error(`Invalid cell value: ${value}. Expected a URL`)\r\n      // }\r\n      return getSharedString(value)\r\n\r\n    case Number:\r\n    // case Integer:\r\n      if (typeof value !== 'number') {\r\n        throw new Error(`Invalid cell value: ${value}. Expected a number`)\r\n      }\r\n      // if (type === Integer && !isInteger(value)) {\r\n      //   throw new Error(`Invalid cell value: ${value}. Expected an Integer`)\r\n      // }\r\n      return String(value)\r\n\r\n    case Date:\r\n      if (!(value instanceof Date)) {\r\n        throw new Error(`Invalid cell value: ${value}. Expected a Date`)\r\n      }\r\n      // \"d\" type doesn't seem to work.\r\n      // return value.toISOString()\r\n      return String(convertDateToExcelSerial(value))\r\n\r\n    case Boolean:\r\n      if (typeof value !== 'boolean') {\r\n        throw new Error(`Invalid cell value: ${value}. Expected a boolean`)\r\n      }\r\n      return value ? '1' : '0'\r\n\r\n    case 'Formula':\r\n      if (typeof value !== 'string') {\r\n        throw new Error(`Invalid cell value: ${value}. Expected a string`)\r\n      }\r\n      return $text(value)\r\n\r\n    default:\r\n      throw new Error(`Unknown schema type: ${type && type.name || type}`)\r\n  }\r\n}\r\n\r\nconst TAG_BRACKET_LEFT_REGEXP = /</g\r\n\r\nfunction getOpeningAndClosingTags(xlsxType) {\r\n  const openingTags = getOpeningTags(xlsxType)\r\n  const closingTags = openingTags.replace(TAG_BRACKET_LEFT_REGEXP, '</')\r\n  return [openingTags, closingTags]\r\n}\r\n\r\nfunction getOpeningTags(xlsxType) {\r\n  switch (xlsxType) {\r\n    case 'inlineStr':\r\n      return '<is><t>'\r\n    case 'f':\r\n      return '<f>'\r\n    default:\r\n      return '<v>'\r\n  }\r\n}"],"mappings":";;;;;;;;;;;;AAAA;AACA;AACA;AAEA,OAAOA,KAAP,MAAkB,wBAAlB;AACA,OAAOC,mBAAP,MAAgC,+BAAhC;AAEA,OAAOC,kBAAP,MAA+B,yBAA/B;AACA,OAAOC,wBAAP,MAAqC,+BAArC;AAEA,eAAe,SAASC,YAAT,CACbC,SADa,EAEbC,WAFa,EAGbC,KAHa,EAIbC,IAJa,EAKbC,WALa,EAMbC,eANa,EAOb;EACA;EACA;EACA;EACA,IAAIH,KAAK,KAAK,IAAd,EAAoB;IAClB,IAAI,CAACE,WAAL,EAAkB;MAChB,OAAO,EAAP;IACD;EACF;;EAED,IAAME,cAAc,GAAG;IACrBC,CAAC,EAAEV,kBAAkB,CAACI,WAAD,EAAcD,SAAd;EADA,CAAvB,CAVA,CAcA;EACA;EACA;EACA;;EACA,IAAII,WAAJ,EAAiB;IACf;IACAE,cAAc,CAACE,CAAf,GAAmBJ,WAAnB;EACD;;EAED,IAAIF,KAAK,KAAK,IAAd,EAAoB;IAClB,mBAAYN,mBAAmB,CAACU,cAAD,CAA/B;EACD,CAzBD,CA2BA;;;EACA,IAAIH,IAAI,KAAKM,IAAT,IAAiB,CAACL,WAAtB,EAAmC;IACjC,MAAM,IAAIM,KAAJ,CAAU,gDAAV,CAAN;EACD;;EAEDR,KAAK,GAAGS,YAAY,CAACR,IAAD,EAAOD,KAAP,EAAcG,eAAd,CAApB;EACAF,IAAI,GAAGS,WAAW,CAACT,IAAD,CAAlB,CAjCA,CAmCA;;EACA,IAAIA,IAAJ,EAAU;IACRG,cAAc,CAACO,CAAf,GAAmBV,IAAnB;EACD;;EAED,4BAAmCW,wBAAwB,CAACX,IAAD,CAA3D;EAAA;EAAA,IAAOY,WAAP;EAAA,IAAoBC,WAApB;;EAEA,OAAO,YAAKpB,mBAAmB,CAACU,cAAD,CAAxB,SACLS,WADK,GAELb,KAFK,GAGLc,WAHK,GAIL,MAJF;AAKD;;AAED,SAASJ,WAAT,CAAqBT,IAArB,EAA2B;EACzB;EACA;EACA;EACA;EACA;EACA;EACA,QAAQA,IAAR;IACE,KAAKc,MAAL;MACA;MACA;MACE,OAAO,GAAP;IACA;IACA;;IAEF,KAAKC,MAAL;MACA;MACE;MACA;MACA;;IAEF,KAAKT,IAAL;MACE;MACA;MACA;;IAEF,KAAKU,OAAL;MACE,OAAO,GAAP;;IAEF,KAAK,SAAL;MACE,OAAO,GAAP;;IAEF;MACE,MAAM,IAAIT,KAAJ,gCAAkCP,IAAI,IAAIA,IAAI,CAACiB,IAAb,IAAqBjB,IAAvD,EAAN;EA1BJ;AA4BD;;AAED,SAASQ,YAAT,CAAsBR,IAAtB,EAA4BD,KAA5B,EAAmCG,eAAnC,EAAoD;EAClD;EACA;EACA;EACA;EACA;EACA;EACA,QAAQF,IAAR;IACE,KAAKc,MAAL;MACA;MACA;MACE,IAAI,OAAOf,KAAP,KAAiB,QAArB,EAA+B;QAC7B,MAAM,IAAIQ,KAAJ,+BAAiCR,KAAjC,yBAAN;MACD,CALH,CAME;MACA;MACA;MACA;MACA;MACA;;;MACA,OAAOG,eAAe,CAACH,KAAD,CAAtB;;IAEF,KAAKgB,MAAL;MACA;MACE,IAAI,OAAOhB,KAAP,KAAiB,QAArB,EAA+B;QAC7B,MAAM,IAAIQ,KAAJ,+BAAiCR,KAAjC,yBAAN;MACD,CAJH,CAKE;MACA;MACA;;;MACA,OAAOe,MAAM,CAACf,KAAD,CAAb;;IAEF,KAAKO,IAAL;MACE,IAAI,EAAEP,KAAK,YAAYO,IAAnB,CAAJ,EAA8B;QAC5B,MAAM,IAAIC,KAAJ,+BAAiCR,KAAjC,uBAAN;MACD,CAHH,CAIE;MACA;;;MACA,OAAOe,MAAM,CAACnB,wBAAwB,CAACI,KAAD,CAAzB,CAAb;;IAEF,KAAKiB,OAAL;MACE,IAAI,OAAOjB,KAAP,KAAiB,SAArB,EAAgC;QAC9B,MAAM,IAAIQ,KAAJ,+BAAiCR,KAAjC,0BAAN;MACD;;MACD,OAAOA,KAAK,GAAG,GAAH,GAAS,GAArB;;IAEF,KAAK,SAAL;MACE,IAAI,OAAOA,KAAP,KAAiB,QAArB,EAA+B;QAC7B,MAAM,IAAIQ,KAAJ,+BAAiCR,KAAjC,yBAAN;MACD;;MACD,OAAOP,KAAK,CAACO,KAAD,CAAZ;;IAEF;MACE,MAAM,IAAIQ,KAAJ,gCAAkCP,IAAI,IAAIA,IAAI,CAACiB,IAAb,IAAqBjB,IAAvD,EAAN;EA9CJ;AAgDD;;AAED,IAAMkB,uBAAuB,GAAG,IAAhC;;AAEA,SAASP,wBAAT,CAAkCQ,QAAlC,EAA4C;EAC1C,IAAMP,WAAW,GAAGQ,cAAc,CAACD,QAAD,CAAlC;EACA,IAAMN,WAAW,GAAGD,WAAW,CAACS,OAAZ,CAAoBH,uBAApB,EAA6C,IAA7C,CAApB;EACA,OAAO,CAACN,WAAD,EAAcC,WAAd,CAAP;AACD;;AAED,SAASO,cAAT,CAAwBD,QAAxB,EAAkC;EAChC,QAAQA,QAAR;IACE,KAAK,WAAL;MACE,OAAO,SAAP;;IACF,KAAK,GAAL;MACE,OAAO,KAAP;;IACF;MACE,OAAO,KAAP;EANJ;AAQD"}